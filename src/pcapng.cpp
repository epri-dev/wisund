// ===========================================================================
// Copyright (c) 2017, Electric Power Research Institute (EPRI)
// All rights reserved.
//
// wisund ("this software") is licensed under BSD 3-Clause license.
//
// Redistribution and use in source and binary forms, with or without modification,
// are permitted provided that the following conditions are met:
//
// *  Redistributions of source code must retain the above copyright notice, this
//    list of conditions and the following disclaimer.
//
// *  Redistributions in binary form must reproduce the above copyright notice,
//    this list of conditions and the following disclaimer in the documentation
//    and/or other materials provided with the distribution.
//
// *  Neither the name of EPRI nor the names of its contributors may
//    be used to endorse or promote products derived from this software without
//    specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
// INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
// WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
// OF SUCH DAMAGE.
//
// This EPRI software incorporates work covered by the following copyright and permission
// notices. You may not use these works except in compliance with their respective
// licenses, which are provided below.
//
// These works are provided by the copyright holders and contributors "as is" and any express or
// implied warranties, including, but not limited to, the implied warranties of merchantability
// and fitness for a particular purpose are disclaimed.
//
// This software relies on the following libraries and licenses:
//
// ###########################################################################
// Boost Software License, Version 1.0
// ###########################################################################
//
// * asio v1.10.8 (https://sourceforge.net/projects/asio/files/)
//
// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
// 
// ###########################################################################
// GNU General Public License version 2
// ###########################################################################
//
// * mongoose v6.5 (https://github.com/cesanta/mongoose)
//
// Copyright (c) 2004-2013 Sergey Lyubka
// Copyright (c) 2013-2015 Cesanta Software Limited
// All rights reserved
//
// This software is dual-licensed: you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation. For the terms of this
// license, see <http://www.gnu.org/licenses/>.
//
// You are free to use this software under the terms of the GNU General
// Public License, but WITHOUT ANY WARRANTY; without even the implied
// warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
// See the GNU General Public License for more details.
//
// Alternatively, you can license this software under a commercial
// license, as set out in <https://www.cesanta.com/license>.
//

#include "pcapng.h"
#include <iostream>
#include <iomanip>
#include <chrono>

namespace pcapng {
std::istream &Block::read(std::istream &in) {
    return in.read(reinterpret_cast<char *>(&len), sizeof *this - sizeof this->BlockType);
}

std::ostream& operator<<(std::ostream &out, const Block &b) {
    return out << std::hex 
        << "\nBlockType = 0x" << b.BlockType
        << "\nlen = 0x" << b.len
        << '\n';
}

std::istream &SHB::read(std::istream &in) {
    return in.read(reinterpret_cast<char *>(&len), sizeof *this - sizeof this->BlockType);
}

std::ostream &SHB::write(std::ostream &out) {
    out.write(reinterpret_cast<char *>(this), sizeof *this);
    return out.write(reinterpret_cast<char *>(&len), sizeof len);
}

std::ostream& operator<<(std::ostream &out, const SHB &b) {
    return out << std::hex
        << "\nBlockType = 0x" << b.BlockType
        << "\nlen = 0x" << b.len
        << "\nByteOrderMagic = 0x" << b.ByteOrderMagic
        << "\nMajorVersion = 0x" << b.MajorVersion
        << "\nMinorVersion = 0x" << b.MinorVersion
        << "\nSectionLen = 0x" << b.SectionLen
        << '\n';
}

std::istream &IDB::read(std::istream &in) {
    return in.read(reinterpret_cast<char *>(&len), sizeof *this - sizeof this->BlockType);
}

std::ostream &IDB::write(std::ostream &out) {
    out.write(reinterpret_cast<char *>(this), sizeof *this);
    return out.write(reinterpret_cast<char *>(&len), sizeof len);
}

std::ostream& operator<<(std::ostream &out, const IDB &b) {
    return out << std::hex 
        << "\nBlockType = 0x" << b.BlockType
        << "\nlen = 0x" << b.len
        << "\nLinkType = 0x" << b.LinkType
        << "\nReserved = 0x" << b.Reserved
        << "\nSnapLen = 0x" << b.SnapLen
        << '\n';
}

std::istream &EPB::read(std::istream &in) {
    return in.read(reinterpret_cast<char *>(&len), sizeof *this - sizeof this->BlockType);
}

std::ostream &EPB::write(std::ostream &out, const uint8_t *pkt, std::size_t pktlen) {
    static constexpr uint32_t pad{0};
    std::size_t padsize{pktlen % sizeof pad ? sizeof pad - pktlen % sizeof pad : 0};
    std::cout << "pktlen = 0x" << std::hex << pktlen << "\npadsize = 0x" << padsize << "\n";
    CapturedLen = OriginalLen = pktlen;
    len += pktlen + padsize;
    out.write(reinterpret_cast<const char *>(this), sizeof *this);
    out.write(reinterpret_cast<const char *>(pkt), pktlen);
    out.write(reinterpret_cast<const char *>(&pad), padsize);
    return out.write(reinterpret_cast<const char *>(&len), sizeof len);
}

std::ostream& operator<<(std::ostream &out, const EPB &b) {
    return out << std::hex 
        << "\nBlockType = 0x" << b.BlockType
        << "\nlen = 0x" << b.len
        << "\nInterfaceID = 0x" << b.InterfaceID
        << "\nTimestampHi = 0x" << b.TimestampHi
        << "\nTimestampLo = 0x" << b.TimestampLo
        << "\nCapturedLen = 0x" << b.CapturedLen
        << "\nOriginalLen = 0x" << b.OriginalLen
        << '\n';
}

// TODO: fix timestamp to always work
/* Right now, the system_clock epoch is assumed to be
 * 1 Jan 1970 00:00:00 which is what the PCAPNG file 
 * requires, but that is implementation defined so we
 * really ought to make a check for that.
 */
void EPB::stamp() {
    uint64_t now = std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
    TimestampHi = now >> 32;
    TimestampLo = now & 0xffffffffu;
}
}
