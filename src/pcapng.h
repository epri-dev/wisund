#ifndef PCAPNG_H
#define PCAPNG_H

// ===========================================================================
// Copyright (c) 2017, Electric Power Research Institute (EPRI)
// All rights reserved.
//
// wisund ("this software") is licensed under BSD 3-Clause license.
//
// Redistribution and use in source and binary forms, with or without modification,
// are permitted provided that the following conditions are met:
//
// *  Redistributions of source code must retain the above copyright notice, this
//    list of conditions and the following disclaimer.
//
// *  Redistributions in binary form must reproduce the above copyright notice,
//    this list of conditions and the following disclaimer in the documentation
//    and/or other materials provided with the distribution.
//
// *  Neither the name of EPRI nor the names of its contributors may
//    be used to endorse or promote products derived from this software without
//    specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
// INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
// WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
// OF SUCH DAMAGE.
//
// This EPRI software incorporates work covered by the following copyright and permission
// notices. You may not use these works except in compliance with their respective
// licenses, which are provided below.
//
// These works are provided by the copyright holders and contributors "as is" and any express or
// implied warranties, including, but not limited to, the implied warranties of merchantability
// and fitness for a particular purpose are disclaimed.
//
// This software relies on the following libraries and licenses:
//
// ###########################################################################
// Boost Software License, Version 1.0
// ###########################################################################
//
// * asio v1.10.8 (https://sourceforge.net/projects/asio/files/)
//
// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
// 

#include <iostream>

/*
 * The minimal PCAPNG file contains one block (SHB) and no data.  
 * A more functional one contains 1 SHB, 1 IDB and one or more EPBs.
 *
 * This is a very rudimentary implementation of a PCAPNG file writer.
 */
namespace pcapng {
// TODO: enable use of options in blocks
class Option {
    uint16_t OptionCode;
    uint16_t len;
} __attribute__((packed));

class Block {
public:
    uint32_t BlockType;
    uint32_t len;
    Block(uint32_t block, uint32_t len=0) : BlockType{block}, len{len} {}
    std::istream &read(std::istream &in);
    friend std::ostream& operator<<(std::ostream &out, const Block &b);
} __attribute__((packed));

// Section Header Block
class SHB : public Block {
public:
    uint32_t ByteOrderMagic;
    uint16_t MajorVersion;
    uint16_t MinorVersion;
    int64_t SectionLen;

    SHB() : 
        Block{0x0a0d0d0a, sizeof *this + sizeof len}, 
        ByteOrderMagic{0x1A2B3C4D},
        MajorVersion{1}, 
        MinorVersion{0}, 
        SectionLen{-1}
    {}
    std::istream &read(std::istream &in);
    std::ostream &write(std::ostream &out);
    friend std::ostream& operator<<(std::ostream &out, const SHB &b);

} __attribute__((packed));

// Interface Description Block
class IDB : public Block {
public:
    uint16_t LinkType;
    uint16_t Reserved;
    uint32_t SnapLen;

    IDB() : Block{1, sizeof *this + sizeof len},
        LinkType{230},  // 	IEEE 802.15.4 wireless Personal Area Network, without the FCS at the end of the frame.   See http://www.tcpdump.org/linktypes.html
        Reserved{0},
        SnapLen{0xffff}
    {}
    std::istream &read(std::istream &in);
    std::ostream &write(std::ostream &out);
    friend std::ostream& operator<<(std::ostream &out, const IDB &b);
} __attribute__((packed));

// Enhanced Packet Block
class EPB : public Block {
public:
    uint32_t InterfaceID;
    uint32_t TimestampHi;
    uint32_t TimestampLo;
    uint32_t CapturedLen;
    uint32_t OriginalLen;

    EPB() : Block{6, sizeof *this + sizeof len},
        InterfaceID{0},
        TimestampHi{0}, 
        TimestampLo{0},
        CapturedLen{0},
        OriginalLen{0}
    { 
        stamp(); 
    }
    std::istream &read(std::istream &in);
    std::ostream &write(std::ostream &out, const uint8_t *pkt, std::size_t pktlen);
    void stamp();
    friend std::ostream& operator<<(std::ostream &out, const EPB &b);
} __attribute__((packed));

}

#endif // PCAPNG_H
