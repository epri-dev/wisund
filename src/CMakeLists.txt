cmake_minimum_required(VERSION 3.0)
set(EXECUTABLE_NAME "wisun-cli")
find_package(BISON)
find_package(FLEX)
find_package(Threads)
BISON_TARGET(parser testmode.yy ${CMAKE_CURRENT_BINARY_DIR}/testmode.cpp COMPILE_FLAGS "--debug")
if(WIN32)
    add_definitions(-D_WIN32_WINDOWS=0x0601)
    add_definitions(-D_WIN32_WINNT=0x0601)
    FLEX_TARGET(scanner testlex.l ${CMAKE_CURRENT_BINARY_DIR}/testlex.cpp COMPILE_FLAGS "--wincompat")
else()
    FLEX_TARGET(scanner testlex.l ${CMAKE_CURRENT_BINARY_DIR}/testlex.cpp)
endif(WIN32)
ADD_FLEX_BISON_DEPENDENCY(scanner parser)
find_package(Asio REQUIRED)
add_definitions(-DASIO_STANDALONE)
include_directories(${ASIO_INCLUDE_DIR})
include_directories(${CMAKE_CURRENT_BINARY_DIR})
include_directories(${CMAKE_CURRENT_SOURCE_DIR})

add_library(Message Message.cpp)
add_library(Console Console.cpp Device.cpp Reply.cpp ${BISON_parser_OUTPUTS} ${FLEX_scanner_OUTPUTS})
add_library(SerialDevice SerialDevice.cpp Device.cpp TunDevice.cpp)
add_library(CaptureDevice CaptureDevice.cpp SinkDevice.cpp CaptureDevice.cpp pcapng.cpp)
add_library(Router Router.cpp Device.cpp)
add_library(Simulator Simulator.cpp Device.cpp)
if (WIN32)
    add_executable(${EXECUTABLE_NAME} ${BISON_parser_OUTPUTS} ${FLEX_scanner_OUTPUTS} wisun-cli.cpp)
    add_executable(wisund ${BISON_parser_OUTPUTS} ${FLEX_scanner_OUTPUTS} wisund.cpp)
    add_executable(wisunsimd ${BISON_parser_OUTPUTS} ${FLEX_scanner_OUTPUTS} wisunsimd.cpp)
else()
    add_executable(${EXECUTABLE_NAME} ${BISON_parser_OUTPUTS} ${FLEX_scanner_OUTPUTS} wisun-cli.cpp)
    add_executable(wisund ${BISON_parser_OUTPUTS} ${FLEX_scanner_OUTPUTS} wisund.cpp)
    add_executable(wisunsimd ${BISON_parser_OUTPUTS} ${FLEX_scanner_OUTPUTS} wisunsimd.cpp)
endif()
add_executable(web_server server.cpp mongoose.c)
if(WITH_DEMO)
    target_link_libraries(web_server ${CMAKE_THREAD_LIBS_INIT} gpio)
else()
    target_link_libraries(web_server ${CMAKE_THREAD_LIBS_INIT})
endif()
target_link_libraries(wisun-cli ${CMAKE_THREAD_LIBS_INIT} Message Console SerialDevice Router CaptureDevice)
target_link_libraries(wisund ${CMAKE_THREAD_LIBS_INIT} Message Console SerialDevice Router CaptureDevice)
target_link_libraries(wisunsimd ${CMAKE_THREAD_LIBS_INIT} Message Console Simulator)
install(TARGETS web_server wisun-cli wisund wisunsimd DESTINATION bin)
install(DIRECTORY "${PROJECT_SOURCE_DIR}/web_root/" DESTINATION "web_root") 
