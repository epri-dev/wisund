cmake_minimum_required(VERSION 3.0)
set(EXECUTABLE_NAME "wisun-cli")
find_package(BISON)
find_package(FLEX)
find_package(Threads)
BISON_TARGET(parser testmode.yy ${CMAKE_CURRENT_BINARY_DIR}/testmode.cpp COMPILE_FLAGS "--debug")
if(WIN32)
    add_definitions(-D_WIN32_WINDOWS=0x0601)
    add_definitions(-D_WIN32_WINNT=0x0601)
    FLEX_TARGET(scanner testlex.l ${CMAKE_CURRENT_BINARY_DIR}/testlex.cpp COMPILE_FLAGS "--wincompat")
else()
    FLEX_TARGET(scanner testlex.l ${CMAKE_CURRENT_BINARY_DIR}/testlex.cpp)
endif(WIN32)
ADD_FLEX_BISON_DEPENDENCY(scanner parser)
find_package(Asio REQUIRED)
add_definitions(-DASIO_STANDALONE)
include_directories(${ASIO_INCLUDE_DIR})
include_directories(${CMAKE_CURRENT_BINARY_DIR})
include_directories(${CMAKE_CURRENT_SOURCE_DIR})
if (WIN32)
add_executable(${EXECUTABLE_NAME} ${BISON_parser_OUTPUTS} ${FLEX_scanner_OUTPUTS} Message.cpp diag.cpp Serial.cpp Console.cpp Router.cpp)
else()
add_executable(${EXECUTABLE_NAME} ${BISON_parser_OUTPUTS} ${FLEX_scanner_OUTPUTS} Message.cpp diag.cpp Serial.cpp Device.cpp Console.cpp Router.cpp)
endif()
add_executable(web_server server.cpp mongoose.c)
#add_executable(wisun-cli wisun-cli.cpp Message.cpp Serial.cpp)
target_link_libraries(web_server ${CMAKE_THREAD_LIBS_INIT} )
target_link_libraries(wisun-cli ${CMAKE_THREAD_LIBS_INIT} )
INSTALL(TARGETS web_server wisun-cli DESTINATION bin)
