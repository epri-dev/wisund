#ifndef SAFEQUEUE_H
#define SAFEQUEUE_H

// ===========================================================================
// Copyright (c) 2017, Electric Power Research Institute (EPRI)
// All rights reserved.
//
// wisund ("this software") is licensed under BSD 3-Clause license.
//
// Redistribution and use in source and binary forms, with or without modification,
// are permitted provided that the following conditions are met:
//
// *  Redistributions of source code must retain the above copyright notice, this
//    list of conditions and the following disclaimer.
//
// *  Redistributions in binary form must reproduce the above copyright notice,
//    this list of conditions and the following disclaimer in the documentation
//    and/or other materials provided with the distribution.
//
// *  Neither the name of EPRI nor the names of its contributors may
//    be used to endorse or promote products derived from this software without
//    specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
// INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
// WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
// OF SUCH DAMAGE.
//
// This EPRI software incorporates work covered by the following copyright and permission
// notices. You may not use these works except in compliance with their respective
// licenses, which are provided below.
//
// These works are provided by the copyright holders and contributors "as is" and any express or
// implied warranties, including, but not limited to, the implied warranties of merchantability
// and fitness for a particular purpose are disclaimed.
//
// This software relies on the following libraries and licenses:
//
// ###########################################################################
// Boost Software License, Version 1.0
// ###########################################################################
//
// * asio v1.10.8 (https://sourceforge.net/projects/asio/files/)
//
// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
// 

/** 
 *  \file SafeQueue.h
 *  \brief Interface for the SafeQueue class
 */
#include <exception>
#include <memory>
#include <queue>
#include <mutex>
#include <condition_variable>

/**
 * \brief Specialization of `std::exception` to handle an empty queue
 */
struct EmptyQueue: std::exception {
    /// returns the exception text
    const char * what() const throw();
};

/**
 * \brief implementation of a thread-safe queue
 */
template<typename T>
class SafeQueue {
public:
    /// default constructor
    SafeQueue() = default;
    /// copy constructor 
    SafeQueue(const SafeQueue& other) {
        std::lock_guard<std::mutex> lock(other.m);
        data = other.data;
    }
    /// delete the = constructor
    SafeQueue& operator=(const SafeQueue&) = delete;
    /// pushes copy of an item onto the queue
    void push(T item) {
        std::lock_guard<std::mutex> lock(m);
        data.push(item);
        data_cond.notify_one();
    }
    /// returns either a `shared_ptr` or `nullptr` if queue is empty
    std::shared_ptr<T> try_pop() {
        std::lock_guard<std::mutex> lock(m);
        if (data.empty())
            return std::shared_ptr<T>();
        std::shared_ptr<T> item(std::make_shared<T>(data.front()));
        data.pop();
        return item;
    }
    /// returns true and populates passed reference only if the queue is not empty
    bool try_pop(T& value) {
        std::lock_guard<std::mutex> lock(m);
        if (data.empty())
            return false;
        value = data.front();
        data.pop();
        return true;
    }
    /// waits for the queue to be non-empty and then pops that value, returning a shared pointer
    std::shared_ptr<T> wait_and_pop() {
        std::unique_lock<std::mutex> lock(m);
        data_cond.wait(lock,[this]{return !data.empty();});
        std::shared_ptr<T> item(std::make_shared<T>(data.front()));
        data.pop();
        return item;
    }
    /// waits for the queue to be non-empty and then pops that value into passed reference
    void wait_and_pop(T& value) {
        std::unique_lock<std::mutex> lock(m);
        data_cond.wait(lock,[this]{return !data.empty();});
        value = data.front();
        data.pop();
    }
    /// returns true if the queue is empty
    bool empty() const {
        std::lock_guard<std::mutex> lock(m);
        return data.empty();
    }


private:
    /// where the data is actually stored
    std::queue<T> data;
    /// mutex to insure integrity of the structure
    mutable std::mutex m;
    /// condition variable on which the various `wait...` functions rely
    std::condition_variable data_cond;
};
#endif // SAFEQUEUE_H
